#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
import sys

# Fetch images for one of the cloud service providers (CSP): "microsoft", "google", "amazon"
def fetch_images(csp):
    if not csp in ["microsoft", "amazon", "google"]:
        raise ValueError("Unsupported CSP")
    url = "https://susepubliccloudinfo.suse.com/v1/%s/images.json" % (csp)
    images = requests.get(url).json()["images"]

    def filter_func(image):
        if "deletedon" in image and image["deletedon"] != "":
            return False
        if "deprecatedon" in image and image["deprecatedon"] != "":
            return False
        return True

    filtered = filter(filter_func, images)
    # Sort by name
    filtered = list(filtered)
    filtered.sort(key=lambda x: x["name"])
    return filtered


def list_gce():
    images = fetch_images("google")
    print("# %-58s | %-40s | %-20s" % ("Name", "Project", "State"))
    for i in images:
        print("%-60s | %-40s | %-20s" % (i["name"], i["project"], i["state"]))


def list_azure(environment="PublicAzure"):
    images = fetch_images("microsoft")
    # Filter by environment
    images = filter(lambda x: x["environment"] == environment, images)
    # Filter weird entries
    images = filter(lambda x : x['name'].startswith("suse-"), images)
    print("# %-58s | %-60s | %-20s" % ("URN", "Name", "State"))
    for i in images:
        print("%-60s | %-60s | %-20s" % (i["urn"], i["name"], i["state"]))


def list_aws(region):
    images = fetch_images("amazon")
    # Filter by region
    images = filter(lambda x: x["region"] == region, images)
    print("# %-23s | %-60s | %-20s" % ("ID", "Name", "State"))
    for i in images:
        print("%-25s | %-60s | %-20s" % (i["id"], i["name"], i["state"]))


def list_aws_regions():
    url = "https://susepubliccloudinfo.suse.com/v1/amazon/regions.json"
    regions = requests.get(url).json()["regions"]
    for x in regions:
        print(x["name"])


def list_azure_regions():
    # We do this old school :-)
    for i in ["Blackforest", "Fairfax", "Mooncake", "PublicAzure"]:
        print(i)


def printUsage():
    print("Usage: %s [OPTIONS] CSP..." % (sys.argv[0]))
    print("CSP              gce|aws|azure")
    print("OPTIONS:")
    print("  --region                    Define region for AWS")
    print("  --regions                   List all AWS regions")
    print("  --environment               Define environment for Azure")
    print("  --environments              List environment for Azure")


if __name__ == "__main__":
    # Parse program arguments
    args = {}
    csp = []
    # Note: I hacked this together in under an hour. I know this is diry and it will hopefully improved one fine day :-)
    i = 0
    while i < len(sys.argv) - 1:
        i += 1
        arg = sys.argv[i]
        if arg == "":
            continue
        elif arg == "-h" or arg == "--help" or arg == "help":
            printUsage()
            sys.exit(0)
        elif arg == "gce" or arg == "google" or arg == "gcp" or arg == "g":
            csp.append("google")
        elif (
            arg == "aws" or arg == "amazon" or arg == "ec2" or arg == "a" or arg == "e"
        ):
            csp.append("amazon")
        elif (
            arg == "azure"
            or arg == "microsoft"
            or arg == "az"
            or arg == "ms"
            or arg == "m"
        ):
            csp.append("azure")
        elif arg == "--region":
            i += 1
            args["region"] = sys.argv[i]
            continue
        elif arg == "--regions":
            list_aws_regions()
            sys.exit(0)
        elif arg == "--env" or arg == "--environment":
            i += 1
            args["environment"] = sys.argv[i]
            continue
        elif arg == "--envs" or arg == "--environments":
            list_azure_regions()
            sys.exit(0)

    # Print usage, if not csp is given because otherwise the output would be blank
    if len(csp) == 0:
        printUsage()
        sys.exit(1)

    for cs in csp:
        if cs == "google":
            list_gce()
        elif cs == "amazon":
            if not "region" in args:
                sys.stderr.write("Missing region argument for amazon\n")
                sys.exit(1)
            list_aws(args["region"])
        elif cs == "azure" or cs == "microsoft":
            environment = "PublicAzure"
            if "environment" in args:
                environment = args["environment"]
            list_azure(environment)
